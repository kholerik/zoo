<?php

namespace app\models;

use app\components\myGalleryBehavior;
//use app\components\MyClass;
use Yii;
//use zxbodya\yii2\galleryManager\GalleryBehavior;
//use zxbodya\yii2\galleryManager\myGalleryBehavior;

/**
 * This is the model class for table "photocontest".
 *
 */
class Photocontest extends \yii\db\ActiveRecord
{

////    public $time;
//    public function getVoteEnd() {
////        return Yii::$app->formatter->asDatetime($this->vote_end, 'php:Y-m-d H:i');
//        return Yii::$app->formatter->asDatetime($this->vote_end, 'php:Y-m-d H:i');
//    }
//
//    public function setVoteEnd($value) {
//        $this->vote_end = strtotime($value);
//    }


    public $tags;

    public function init()
    {
//        $this->tags = PcTag::find()->where(['photocontest_id' => $this->id ])->one();
//        print_r(PcTag::find()->where(['photocontest_id' => 1 ])->all()); die();
        return parent::init(); // TODO: Change the autogenerated stub
    }




    public function afterSave($insert, $changedAttributes){
        parent::afterSave($insert, $changedAttributes);
        $tags = explode(',', $this->tags);
        if ($tags[0] != '') {
            foreach ($tags as $tag) {
                $pcTag = new PcTag();
                $pcTag->name = $tag;
                $pcTag->photocontest_id = $this->id;
                $pcTag->save() OR print_r('photocontest/model ' . $pcTag->getErrors());
            }
        }
    }


//    public function beforeSave($insert)
//    {
////        $tags = explode(',', $this->tags);
////
//////        $this->title = 'dgggggggggggg';
////        $pcTag = new PcTag();
////        $pcTag->name =11111;
////        $pcTag->photocontest_id =2222222;
////        print_r($pcTag); die();
////        print_r( $pcTag->validate() ); die();
//
//
////        foreach ($tags as $tag) {
////            $pcTag = new PcTag();
////            $pcTag->name = $tag;
////            $pcTag->photocontest_id = $this->id;
////            $pcTag->save();
////        }
//        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//    }



    private $preview_w = 100;
    private $preview_h = 100;

    private function preview() {
//        $this->preview_w = $this->preview_w;
//        $this->preview_h = $this->preview_h;
    }


    public function behaviors()
    {
        return [
            'galleryBehavior' => [
                'myTableName' => $this->tableName(),
                'class' => myGalleryBehavior::className(),
                'type' => 'photocontest',
                'extension' => 'jpg',
                'directory' => Yii::getAlias('@webroot') . '/uploads/gallery',
                'url' => Yii::getAlias('@web') . '/uploads/gallery',
                'versions' => [
                    'small' => function ($img) {
                        /** @var \Imagine\Image\ImageInterface $img */
                        $this->preview();
                        return $img
                            ->copy()
                            ->thumbnail(new \Imagine\Image\Box( $this->preview_w, $this->preview_h ));
                    },
                    'medium' => function ($img) {
                        /** @var \Imagine\Image\ImageInterface $img */
                        $dstSize = $img->getSize();
                        $this->preview();
                        $maxWidth = $this->preview_w;
                        if ($dstSize->getWidth() > $maxWidth) {
                            $dstSize = $dstSize->widen($maxWidth);
                        }
                        return $img
                            ->copy()
                            ->resize($dstSize);
                    },
                ]
            ]
        ];
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'photocontest';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['preview_w', 'preview_h', 'title_id', 'partnerType_id', 'onePhoto_check', 'comment_check', 'vote_check', 'voteGuest_check', 'voteStop_check', 'noViewVote_check', 'deleteVote_check', 'onIndexPage_check'], 'integer'],
            [['text', 'text2'], 'string'],
            [['title', 'vote_end'], 'string', 'max' => 255],
            [['partner', 'tags'], 'string', 'max' => 500],
            [['title_id'], 'exist', 'skipOnError' => true, 'targetClass' => Pctitle::className(), 'targetAttribute' => ['title_id' => 'id']],
            [['partnerType_id'], 'exist', 'skipOnError' => true, 'targetClass' => Pcpartner::className(), 'targetAttribute' => ['partnerType_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'title' => 'Заголовок',
            'preview_w' => 'Ширина превью',
            'preview_h' => 'Высота превью',
            'text' => 'Описание',
            'title_id' => 'Заголовок блока с описанием (выпадающий список: О конкурсе, О проекте) ',
            'partner' => 'Партнеры',
            'partnerType_id' => 'Сайт (выпадающий список: партнер, организатор) ',
            'onePhoto_check' => 'Только одно фото у каждого участника ',
            'comment_check' => 'Разрешено комментирование страницы',
            'vote_check' => 'Есть голосование !!! переделать на выбор голосования!!!',
            'voteGuest_check' => 'Голосование без авторизации ',
            'vote_end' => 'Дата окончания голосования (календарь) ',
            'voteStop_check' => 'Голосование завершено досрочно',
            'noViewVote_check' => 'Не показывать результаты голосования после его завершения ',
            'deleteVote_check' => 'Обнулить сейчас голоса участников ',
            'onIndexPage_check' => 'Показывать фотовыставку на главной',
            'tags' => 'Категории (тэги), через запятую',
            'text2' => 'Нижнее описание',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTitle0()
    {
        return $this->hasOne(Pctitle::className(), ['id' => 'title_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPartnerType()
    {
        return $this->hasOne(Pcpartner::className(), ['id' => 'partnerType_id']);
    }
}
