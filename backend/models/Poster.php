<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "Poster".
 *
 * @property integer $id
 * @property integer $category_id
 * @property string $title
 * @property string $shortDescription
 * @property integer $child_check
 * @property integer $master_check
 * @property integer $meet_check
 * @property integer $priority_check
 * @property integer $adBlock_check
 * @property integer $socNet_check
 * @property integer $age_id
 * @property integer $noAge_check
 * @property string $place
 * @property integer $format_id
 * @property string $description
 * @property string $photo
 * @property string $video
 * @property string $video2
 *
 * @property PCategory $category
 * @property PFormat $format
 * @property PAlbumPhotoMn[] $pAlbumPhotoMns
 * @property PosterPhoto[] $photos
 * @property PPhotoMn[] $pPhotoMns
 * @property Pphoto[] $pphotos
 * @property PtimeMn[] $ptimeMns
 * @property PTime[] $ptimes
 */
class Poster extends \yii\db\ActiveRecord
{
    public $date_start;
    public $date_end;

    public function afterSave($insert, $changedAttributes)
    {
        $pTime = new PTime();

        $pTime->start_date = $this->date_start;
        $pTime->end_date = $this->date_end;

        $pTime->save();

        $pTimeMn = new PtimeMn();

        $pTimeMn->poster_id = $this->id;
        $pTimeMn->ptime_id = $pTime->id;

        $pTimeMn->save();

        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'Poster';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category_id', 'child_check', 'master_check', 'meet_check', 'priority_check', 'adBlock_check', 'socNet_check', 'age_id', 'noAge_check', 'format_id'], 'integer'],
            [['description'], 'string'],
            [['date_start' , 'date_end'], 'safe'],
            [['title', 'place', 'photo'], 'string', 'max' => 255],
            [['shortDescription', 'video', 'video2'], 'string', 'max' => 500],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => PCategory::className(), 'targetAttribute' => ['category_id' => 'id']],
            [['format_id'], 'exist', 'skipOnError' => true, 'targetClass' => PFormat::className(), 'targetAttribute' => ['format_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Рубрика',
            'title' => 'Название',
            'shortDescription' => 'Short Description',
            'child_check' => 'Детская афиша',
            'master_check' => 'Мастер-классы',
            'meet_check' => 'Встречи',
            'priority_check' => 'Приоритетное расположение вверху списка',
            'adBlock_check' => 'Разместить в рекламных блоках "Ожидаемые события", "Не пропусти!"',
            'socNet_check' => 'Опубликовать в Facebook и ВКонтакте',
            'age_id' => 'Возрастные ограничения',
            'noAge_check' => 'Без ограничений',
            'place' => 'Место проведения',
            'format_id' => 'Формат',
            'description' => 'Description',
            'photo' => 'Photo',
            'video' => 'Video',
            'video2' => 'Video2',
            'date_start' => 'Начало',
            'date_end' => 'Окончание',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(PCategory::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFormat()
    {
        return $this->hasOne(PFormat::className(), ['id' => 'format_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPAlbumPhotoMns()
    {
        return $this->hasMany(PAlbumPhotoMn::className(), ['poster_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPhotos()
    {
        return $this->hasMany(PosterPhoto::className(), ['id' => 'photo_id'])->viaTable('pAlbum_photo_mn', ['poster_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPPhotoMns()
    {
        return $this->hasMany(PPhotoMn::className(), ['pposter_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPphotos()
    {
        return $this->hasMany(Pphoto::className(), ['id' => 'pphoto_id'])->viaTable('pPhoto_mn', ['pposter_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPtimeMns()
    {
        return $this->hasMany(PtimeMn::className(), ['poster_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPtimes()
    {
        return $this->hasMany(PTime::className(), ['id' => 'ptime_id'])->viaTable('ptime_mn', ['poster_id' => 'id']);
    }
}
